/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MewAuctionAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "endAuction"
      | "getCurrentBid"
      | "getWinner"
      | "newBid"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MewAuctionEnd" | "MewAuctionNewBid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(functionFragment: "newBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace MewAuctionEndEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MewAuctionNewBidEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MewAuctionApp extends BaseContract {
  connect(runner?: ContractRunner | null): MewAuctionApp;
  waitForDeployment(): Promise<this>;

  interface: MewAuctionAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  endAuction: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentBid: TypedContractMethod<[], [bigint], "view">;

  getWinner: TypedContractMethod<[], [string], "view">;

  newBid: TypedContractMethod<[], [void], "payable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newBid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "MewAuctionEnd"
  ): TypedContractEvent<
    MewAuctionEndEvent.InputTuple,
    MewAuctionEndEvent.OutputTuple,
    MewAuctionEndEvent.OutputObject
  >;
  getEvent(
    key: "MewAuctionNewBid"
  ): TypedContractEvent<
    MewAuctionNewBidEvent.InputTuple,
    MewAuctionNewBidEvent.OutputTuple,
    MewAuctionNewBidEvent.OutputObject
  >;

  filters: {
    "MewAuctionEnd(address)": TypedContractEvent<
      MewAuctionEndEvent.InputTuple,
      MewAuctionEndEvent.OutputTuple,
      MewAuctionEndEvent.OutputObject
    >;
    MewAuctionEnd: TypedContractEvent<
      MewAuctionEndEvent.InputTuple,
      MewAuctionEndEvent.OutputTuple,
      MewAuctionEndEvent.OutputObject
    >;

    "MewAuctionNewBid(address,uint256)": TypedContractEvent<
      MewAuctionNewBidEvent.InputTuple,
      MewAuctionNewBidEvent.OutputTuple,
      MewAuctionNewBidEvent.OutputObject
    >;
    MewAuctionNewBid: TypedContractEvent<
      MewAuctionNewBidEvent.InputTuple,
      MewAuctionNewBidEvent.OutputTuple,
      MewAuctionNewBidEvent.OutputObject
    >;
  };
}
